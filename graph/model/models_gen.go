// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CartInput struct {
	ItemID   int `json:"itemID"`
	Quantity int `json:"quantity"`
}

type CartItem struct {
	Quantity int   `json:"quantity"`
	Item     *Item `json:"item"`
}

type Catalog struct {
	ID       int        `json:"id"`
	Name     string     `json:"name"`
	ParentID *int       `json:"parent_id,omitempty"`
	Childs   []*Catalog `json:"childs"`
	Items    []*Item    `json:"items"`
}

type CatalogInput struct {
	CatalogID int          `json:"catalogID"`
	Name      string       `json:"name"`
	ParentID  *int         `json:"parentID,omitempty"`
	Items     []*ItemInput `json:"items,omitempty"`
}

type Comment struct {
	UserID      int     `json:"userID"`
	ItemsID     int     `json:"itemsID"`
	ParentID    *string `json:"parentID,omitempty"`
	Rate        int     `json:"rate"`
	CommentText string  `json:"commentText"`
}

type CommentInput struct {
	ItemID      int    `json:"itemID"`
	CommentText string `json:"commentText"`
}

type CommentToCommentInput struct {
	CommentID   string `json:"commentID"`
	CommentText string `json:"commentText"`
}

type Item struct {
	ID          int      `json:"id"`
	Name        string   `json:"name"`
	Seller      *Seller  `json:"seller"`
	Parent      *Catalog `json:"parent,omitempty"`
	InStock     int      `json:"in_stock"`
	InStockText string   `json:"inStockText"`
	Rate        float64  `json:"rate"`
	SellerID    int      `json:"seller_id"`
	InCart      int      `json:"inCart"`
	CatalogID   int      `json:"catalog_id"`
}

type ItemInput struct {
	ItemID    int    `json:"itemID"`
	CatalogID int    `json:"catalogID"`
	Name      string `json:"name"`
	SellerID  int    `json:"sellerID"`
	InStock   int    `json:"inStock"`
}

type Mutation struct {
}

type MyCart struct {
	Items    []*Item `json:"items"`
	Quantity int     `json:"quantity"`
}

type Order struct {
	UserID  int         `json:"userID"`
	OrderID int         `json:"orderID"`
	Items   []*CartItem `json:"items"`
	Status  string      `json:"status"`
}

type Query struct {
}

type RateInput struct {
	ItemID int `json:"itemID"`
	Rate   int `json:"rate"`
}

type Seller struct {
	ID      int     `json:"id"`
	Name    string  `json:"name"`
	ItemIds []int   `json:"item_ids"`
	Items   []*Item `json:"items"`
}

type UserInfo struct {
	UserID int `json:"UserID"`
	RoleID int `json:"RoleID"`
}

type UserRole struct {
	UserID int `json:"userID"`
	RoleID int `json:"roleID"`
}

type Role string

const (
	RoleAdmin     Role = "admin"
	RoleUser      Role = "user"
	RoleSuperuser Role = "superuser"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
	RoleSuperuser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser, RoleSuperuser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
